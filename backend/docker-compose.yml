services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5673:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=securepassword123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: myuser # your local DB username
      POSTGRES_PASSWORD: mypassword # your local DB password
      POSTGRES_DB: mydatabase # your local DB name
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "myuser", "-d", "mydatabase"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s

  nestjs-app:
    build:
      context: ./core
      dockerfile: dockerfile
      args:
        - DATABASE_URL=postgresql://myuser:mypassword@postgres:5432/mydatabase
        - SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN}
        - SENTRY_DSN=${SENTRY_DSN}
    container_name: nestjs-app
    ports:
      - "3001:3001"
    env_file:
      - path: ./core/.env
        required: true
    environment:
      - NODE_ENV=development

      # Override the DATABASE_URL from the .env file
      - DATABASE_URL=postgresql://myuser:mypassword@postgres:5432/mydatabase

      # Runtime environment variables for the running container
      - RABBITMQ_URL=amqp://admin:securepassword123@rabbitmq:5672
      - PYTHONUNBUFFERED=1
      - SCHEDULING_SERVICE_URL=http://localhost:8000
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

    networks:
      - app-network
    restart: unless-stopped

  python-service:
    build:
      context: ./python-service
      dockerfile: Dockerfile
    container_name: python-service
    environment:
      - RABBITMQ_URL=amqp://admin:securepassword123@rabbitmq:5672
      - PYTHONUNBUFFERED=1
    env_file:
      - ./python-service/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  scheduling-service:
    build:
      context: ./scheduling-service
      dockerfile: Dockerfile
    container_name: scheduling-service
    ports:
      - "8000:8000"
    env_file:
      - ./scheduling-service/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  rabbitmq_data:
  postgres_data: