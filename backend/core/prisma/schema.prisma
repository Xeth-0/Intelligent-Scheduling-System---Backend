generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum ClassroomType {
  LECTURE
  LAB
  SEMINAR
}

enum SessionType {
  LECTURE
  LAB
  SEMINAR
}

// ========== Building ==========
model Building {
  buildingId String      @id @default(uuid())
  name       String
  floor      Int
  classrooms Classroom[]
}

// ========== Campus ==========
model Campus {
  campusId         String       @id @default(uuid())
  name             String
  location         String?
  schedulingPolicy String?
  departments      Department[]
  classrooms       Classroom[]
}

// ========== User ==========
model User {
  userId                       String   @id @default(uuid())
  firstName                    String
  lastName                     String
  email                        String   @unique
  passwordHash                 String
  role                         Role
  phone                        String?
  needWheelchairAccessibleRoom Boolean  @default(false)
  createdAt                    String @default(now())
  updatedAt                    String @updatedAt
  teacher                      Teacher?
  student                      Student?
  admin                        Admin?
}

// ========== Teacher ==========
model Teacher {
  teacherId    String       @id @default(uuid())
  user         User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId       String       @unique
  department   Department?  @relation(fields: [departmentId], references: [deptId], onDelete: Restrict)
  departmentId String?
  courses      Course[]     @relation("CourseTeachers")
  schedules    Schedule[]
  preferences  Preference[]
}

// ========== Student ==========
model Student {
  studentId      String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId         String        @unique
  studentGroup   StudentGroup? @relation(fields: [studentGroupId], references: [studentGroupId], onDelete: Restrict)
  studentGroupId String?
}

// ========== Admin ==========
model Admin {
  adminId String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId  String @unique
}

// ========== Department ==========
model Department {
  deptId        String         @id @default(uuid())
  name          String
  campus        Campus         @relation(fields: [campusId], references: [campusId], onDelete: Cascade)
  campusId      String
  teachers      Teacher[]
  studentGroups StudentGroup[]
  courses       Course[]
}

// ========== Course ==========
model Course {
  courseId       String         @id @default(uuid())
  name           String
  code           String
  department     Department?    @relation(fields: [departmentId], references: [deptId], onDelete: SetNull)
  departmentId   String?
  teachers       Teacher[]      @relation("CourseTeachers")
  schedules      Schedule[]
  studentGroups  StudentGroup[]
  description    String?
  sessionType    SessionType
  sessionPerWeek Int
}

// ========== StudentGroup ==========
model StudentGroup {
  studentGroupId           String     @id @default(uuid())
  name                     String
  size                     Int
  accessibilityRequirement Boolean    @default(false)
  department               Department @relation(fields: [departmentId], references: [deptId], onDelete: Cascade)
  departmentId             String
  students                 Student[]
  schedules                Schedule[]
  courses                  Course[]
}

// ========== Classroom ==========
model Classroom {
  classroomId            String        @id @default(uuid())
  name                   String
  capacity               Int
  type                   ClassroomType
  campus                 Campus        @relation(fields: [campusId], references: [campusId], onDelete: Cascade)
  campusId               String
  building               Building?     @relation(fields: [buildingId], references: [buildingId], onDelete: SetNull)
  buildingId             String?
  isWheelchairAccessible Boolean       @default(false)
  openingTime            String?
  closingTime            String?
  floor                  Int
  schedules              Schedule[]
}

// ========== Schedule ==========
model Schedule {
  scheduleId     String        @id @default(uuid())
  course         Course        @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  courseId       String
  teacher        Teacher       @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade)
  teacherId      String
  classroom      Classroom?    @relation(fields: [classroomId], references: [classroomId], onDelete: SetNull)
  classroomId    String?
  studentGroup   StudentGroup? @relation(fields: [studentGroupId], references: [studentGroupId], onDelete: SetNull)
  studentGroupId String?
  startTime      String
  endTime        String
  isFinalized    Boolean       @default(false)
  sessionType    String?
  timeSlot       Int?
  createdAt      String      @default(now())
  updatedAt      String      @updatedAt
  isValidHard    Boolean?
  isValidSoft    Boolean?
  day            String?
}

// ========== PreferenceType ==========
model PreferenceType {
  preferenceTypeId String          @id @default(uuid())
  key              String          @unique
  description      String?
  possibleValues   PossibleValue[]
  preferences      Preference[]
}

// ========== PossibleValue ==========
model PossibleValue {
  possibleValueId  String         @id @default(uuid())
  value            String
  preferenceType   PreferenceType @relation(fields: [preferenceTypeId], references: [preferenceTypeId], onDelete: Cascade)
  preferenceTypeId String
  preferences      Preference[]
}

// ========== Preference ==========
model Preference {
  preferenceId     String         @id @default(uuid())
  teacher          Teacher        @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade)
  teacherId        String
  preferenceType   PreferenceType @relation(fields: [preferenceTypeId], references: [preferenceTypeId], onDelete: Cascade)
  preferenceTypeId String
  value            PossibleValue  @relation(fields: [possibleValueId], references: [possibleValueId], onDelete: Cascade)
  possibleValueId  String
}

// ========== RefreshToken ==========
model RefreshToken {
  refreshTokenId String   @id @default(uuid())
  userId         String
  token          String
  expiresAt      String
  createdAt      String @default(now())
}
