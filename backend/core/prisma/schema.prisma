generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum ClassroomType {
  LECTURE
  LAB
  SEMINAR
}

enum SessionType {
  LECTURE
  LAB
  SEMINAR
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TaskStatus {
  COMPLETED
  QUEUED
  FAILED
}

model Timeslot {
  // yes this is basically an enum with more data, but it's a good idea to have it as a separate model
  timeslotId String @id @default(cuid())
  code       String @unique // e.g. "0900_1000"
  label      String // e.g. "09:00-10:00"
  startTime  String // e.g. "09:00"
  endTime    String // e.g. "10:00"
  order      Int    @unique // e.g. 2

  sessions ScheduledSession[]
}

// ========== Building ==========
model Building {
  buildingId String      @id @default(uuid())
  name       String
  floor      Int
  // campus     Campus      @relation(fields: [campusId], references: [campusId], onDelete: Cascade)
  // campusId   String
  classrooms Classroom[]
}

// ========== Campus ==========
model Campus {
  campusId         String       @id @default(uuid())
  name             String
  location         String?
  schedulingPolicy String?
  departments      Department[]
  classrooms       Classroom[]
  schedules        Schedule[]
  admins           Admin[]
  // buildings        Building[]
  Task             Task[]
  Constraint       Constraint[]
}

// ========== User ==========
model User {
  userId                       String   @id @default(uuid())
  firstName                    String
  lastName                     String
  email                        String   @unique
  passwordHash                 String
  role                         Role
  phone                        String?
  needWheelchairAccessibleRoom Boolean  @default(false)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  teacher                      Teacher?
  student                      Student?
  admin                        Admin?
}

// ========== Teacher ==========
model Teacher {
  teacherId     String             @id @default(uuid())
  user          User               @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId        String             @unique
  department    Department         @relation(fields: [departmentId], references: [deptId], onDelete: Restrict)
  departmentId  String
  courses       Course[]           
  scheduleItems ScheduledSession[]
  Constraint    Constraint[]
}

// ========== Student ==========
model Student {
  studentId      String  @id @default(uuid())
  userId         String  @unique
  studentGroupId String?

  user         User          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  studentGroup StudentGroup? @relation(fields: [studentGroupId], references: [studentGroupId], onDelete: Restrict)
}

// ========== Admin ==========
model Admin {
  adminId   String     @id @default(uuid())
  userId    String     @unique
  campusId  String
  schedules Schedule[] // Schedules that this admin has created
  Task      Task[]

  campus Campus @relation(fields: [campusId], references: [campusId], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

// ========== Department ==========
model Department {
  deptId        String         @id @default(uuid())
  name          String
  campusId      String
  teachers      Teacher[]
  studentGroups StudentGroup[]
  courses       Course[]

  campus Campus @relation(fields: [campusId], references: [campusId], onDelete: Cascade)
  // Constraint Constraint[]
}

// ========== Course ==========
model Course {
  courseId        String             @id @default(uuid())
  name            String
  code            String
  description     String?
  departmentId    String?
  ectsCredits     Int                @default(0)
  teacherId       String?
  teacher         Teacher?            @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade)
  scheduleItems   ScheduledSession[]
  studentGroups   StudentGroup[]
  sessionType     SessionType        @default(LECTURE)
  sessionsPerWeek Int

  department Department? @relation(fields: [departmentId], references: [deptId], onDelete: SetNull)
}

// ========== StudentGroup ==========
model StudentGroup {
  studentGroupId           String             @id @default(uuid())
  name                     String
  size                     Int
  accessibilityRequirement Boolean            @default(false)
  departmentId             String
  courses                  Course[]
  students                 Student[]
  scheduleItems            ScheduledSession[]

  department Department @relation(fields: [departmentId], references: [deptId], onDelete: Cascade)

  @@unique([departmentId, name])
}

// ========== Classroom ==========
model Classroom {
  classroomId            String             @id @default(uuid())
  name                   String
  capacity               Int
  type                   ClassroomType
  campusId               String
  buildingId             String?
  isWheelchairAccessible Boolean            @default(false)
  openingTime            String?
  closingTime            String?
  scheduleItems          ScheduledSession[]
  floor                  Int

  campus   Campus    @relation(fields: [campusId], references: [campusId], onDelete: Cascade)
  building Building? @relation(fields: [buildingId], references: [buildingId], onDelete: SetNull)
}

// ========== ScheduledSession ==========
model ScheduledSession {
  scheduledSessionId String       @id @default(uuid())
  isFinalized        Boolean      @default(false)
  sessionType        SessionType?
  timeslotId         String
  day                DayOfWeek
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  courseId           String
  teacherId          String
  classroomId        String?
  studentGroupId     String?
  scheduleId         String

  course       Course        @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  teacher      Teacher       @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade)
  schedule     Schedule      @relation(fields: [scheduleId], references: [scheduleId], onDelete: Cascade)
  classroom    Classroom?    @relation(fields: [classroomId], references: [classroomId], onDelete: SetNull)
  studentGroup StudentGroup? @relation(fields: [studentGroupId], references: [studentGroupId], onDelete: SetNull)
  timeslot     Timeslot      @relation(fields: [timeslotId], references: [timeslotId])

  @@unique([scheduleId, timeslotId, day, classroomId])
  @@unique([scheduleId, timeslotId, day, teacherId])
  @@unique([scheduleId, timeslotId, day, studentGroupId])
  @@map("ScheduleItem")
}

// ========== Schedule ==========
model Schedule {
  scheduleId         String             @id @default(uuid())
  scheduleName       String             @default("Unnamed Schedule")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  fitnessScore       Float?
  scheduleItems      ScheduledSession[]
  campusId           String
  generatedByAdminId String
  active             Boolean            @default(false)

  generatedBy Admin   @relation(fields: [generatedByAdminId], references: [adminId])
  campus      Campus? @relation(fields: [campusId], references: [campusId])

  @@index([campusId, active])
}

// ========== RefreshToken ==========
model RefreshToken {
  refreshTokenId String   @id @default(uuid())
  userId         String
  token          String
  expiresAt      DateTime
  createdAt      DateTime @default(now())
}

model Task {
  taskId     String     @id @default(uuid())
  admin      Admin      @relation(fields: [adminId], references: [adminId], onDelete: Cascade)
  adminId    String
  campus     Campus?    @relation(fields: [campusId], references: [campusId], onDelete: SetNull)
  campusId   String?
  status     TaskStatus
  errorCount Int        @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  errors TaskError[]
}

model TaskError {
  id        String   @id @default(uuid())
  task      Task     @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  taskId    String
  message   String
  createdAt DateTime @default(now())
}

// ============ Preferenes ==============
enum ConstraintCategory {
  CAMPUS_PREFERENCE // Campus-wide admin policies
  TEACHER_PREFERENCE // Individual teacher preferences  
  STUDENT_GROUP_PREFERENCE // Admin-set student group policies

  @@map("ConstraintScope")
}

enum ConstraintValueType {
  TIME_SLOT
  DAY_OF_WEEK
  ROOM
  NUMERIC_SCALE
  BOOLEAN
  COURSE_CRITERIA
  SCHEDULE_STRUCTURE
}

model ConstraintType {
  id          String              @id @default(uuid())
  name        String
  description String?
  category    ConstraintCategory
  valueType   ConstraintValueType
  jsonSchema  Json // json schema for the constraint validation
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  constraints Constraint[]
}

model Constraint {
  id               String   @id @default(uuid())
  constraintTypeId String
  value            Json
  priority         Float    @default(5.0) // 1.0 to 10.0 for importance of the constraint
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  teacherId        String?
  campusId         String?

  constraintType ConstraintType @relation(fields: [constraintTypeId], references: [id], onDelete: Cascade)
  teacher        Teacher?       @relation(fields: [teacherId], references: [teacherId], onDelete: SetNull)
  campus         Campus?        @relation(fields: [campusId], references: [campusId], onDelete: SetNull)
}
