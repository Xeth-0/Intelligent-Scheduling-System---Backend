generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum ClassroomType {
  LECTURE
  LAB
  SEMINAR
}

enum SessionType {
  LECTURE
  LAB
  SEMINAR
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TaskStatus {
  COMPLETED
  QUEUED
  FAILED
}

enum TaskSeverity {
  WARNING
  ERROR
}

// ========== Building ==========
model Building {
  buildingId String      @id @default(uuid())
  name       String
  floor      Int
  // campus     Campus      @relation(fields: [campusId], references: [campusId], onDelete: Cascade)
  // campusId   String
  classrooms Classroom[]
}

// ========== Campus ==========
model Campus {
  campusId         String       @id @default(uuid())
  name             String
  location         String?
  schedulingPolicy String?
  departments      Department[]
  classrooms       Classroom[]
  schedules        Schedule[]
  admins           Admin[]
  // buildings        Building[]
  Task             Task[]
}

// ========== User ==========
model User {
  userId                       String   @id @default(uuid())
  firstName                    String
  lastName                     String
  email                        String   @unique
  passwordHash                 String
  role                         Role
  phone                        String?
  needWheelchairAccessibleRoom Boolean  @default(false)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  teacher                      Teacher?
  student                      Student?
  admin                        Admin?
}

// ========== Teacher ==========
model Teacher {
  teacherId     String             @id @default(uuid())
  user          User               @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId        String             @unique
  department    Department         @relation(fields: [departmentId], references: [deptId], onDelete: Restrict)
  departmentId  String
  courses       Course[]           @relation("CourseTeachers")
  scheduleItems ScheduledSession[]
  preferences   Preference[]
}

// ========== Student ==========
model Student {
  studentId      String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId         String        @unique
  studentGroup   StudentGroup? @relation(fields: [studentGroupId], references: [studentGroupId], onDelete: Restrict)
  studentGroupId String?
}

// ========== Admin ==========
model Admin {
  adminId   String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    String     @unique
  schedules Schedule[] // Schedules that this admin has created
  campus    Campus     @relation(fields: [campusId], references: [campusId], onDelete: Cascade)
  campusId  String
  Task      Task[]
}

// ========== Department ==========
model Department {
  deptId        String         @id @default(uuid())
  name          String
  campus        Campus         @relation(fields: [campusId], references: [campusId], onDelete: Cascade)
  campusId      String
  teachers      Teacher[]
  studentGroups StudentGroup[]
  courses       Course[]
}

// ========== Course ==========
model Course {
  courseId        String             @id @default(uuid())
  name            String
  code            String
  description     String?
  department      Department?        @relation(fields: [departmentId], references: [deptId], onDelete: SetNull)
  departmentId    String?
  teachers        Teacher[]          @relation("CourseTeachers")
  scheduleItems   ScheduledSession[]
  studentGroups   StudentGroup[]
  sessionType     SessionType        @default(LECTURE)
  sessionsPerWeek Int
}

// ========== StudentGroup ==========
model StudentGroup {
  studentGroupId           String             @id @default(uuid())
  name                     String
  size                     Int
  accessibilityRequirement Boolean            @default(false)
  department               Department         @relation(fields: [departmentId], references: [deptId], onDelete: Cascade)
  departmentId             String
  students                 Student[]
  scheduleItems            ScheduledSession[]
  courses                  Course[]

  @@unique([departmentId, name])
}

// ========== Classroom ==========
model Classroom {
  classroomId            String             @id @default(uuid())
  name                   String
  capacity               Int
  type                   ClassroomType
  campus                 Campus             @relation(fields: [campusId], references: [campusId], onDelete: Cascade)
  campusId               String
  building               Building?          @relation(fields: [buildingId], references: [buildingId], onDelete: SetNull)
  buildingId             String?
  isWheelchairAccessible Boolean            @default(false)
  openingTime            String?
  closingTime            String?
  scheduleItems          ScheduledSession[]
  floor                  Int
}

// ========== ScheduledSession ==========
model ScheduledSession {
  scheduledSessionId String        @id @default(uuid())
  startTime          String
  endTime            String
  isFinalized        Boolean       @default(false)
  sessionType        SessionType?
  timeSlot           Int?
  day                DayOfWeek
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  course             Course        @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  courseId           String
  teacher            Teacher       @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade)
  teacherId          String
  classroom          Classroom?    @relation(fields: [classroomId], references: [classroomId], onDelete: SetNull)
  classroomId        String?
  studentGroup       StudentGroup? @relation(fields: [studentGroupId], references: [studentGroupId], onDelete: SetNull)
  studentGroupId     String?
  schedule           Schedule      @relation(fields: [scheduleId], references: [scheduleId], onDelete: Cascade)
  scheduleId         String

  @@map("ScheduleItem")
}

// ========== Schedule ==========
model Schedule {
  scheduleId         String             @id @default(uuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  fitnessScore       Float?
  scheduleItems      ScheduledSession[]
  campus             Campus?            @relation(fields: [campusId], references: [campusId])
  campusId           String
  generatedBy        Admin              @relation(fields: [generatedByAdminId], references: [adminId])
  generatedByAdminId String
  active             Boolean            @default(false)

  @@index([campusId, active])
}

// ========== PreferenceType ==========
model PreferenceType {
  preferenceTypeId String          @id @default(uuid())
  key              String          @unique
  description      String?
  possibleValues   PossibleValue[]
  preferences      Preference[]
}

// ========== PossibleValue ==========
model PossibleValue {
  possibleValueId  String         @id @default(uuid())
  value            String
  preferenceType   PreferenceType @relation(fields: [preferenceTypeId], references: [preferenceTypeId], onDelete: Cascade)
  preferenceTypeId String
  preferences      Preference[]
}

// ========== Preference ==========
model Preference {
  preferenceId     String         @id @default(uuid())
  teacher          Teacher        @relation(fields: [teacherId], references: [teacherId], onDelete: Cascade)
  teacherId        String
  preferenceType   PreferenceType @relation(fields: [preferenceTypeId], references: [preferenceTypeId], onDelete: Cascade)
  preferenceTypeId String
  value            PossibleValue  @relation(fields: [possibleValueId], references: [possibleValueId], onDelete: Cascade)
  possibleValueId  String
}

// ========== RefreshToken ==========
model RefreshToken {
  refreshTokenId String   @id @default(uuid())
  userId         String
  token          String
  expiresAt      DateTime
  createdAt      DateTime @default(now())
}

model Task {
  taskId      String     @id @default(uuid())
  admin       Admin      @relation(fields: [adminId], references: [adminId], onDelete: Cascade)
  adminId     String
  campus      Campus?    @relation(fields: [campusId], references: [campusId], onDelete: SetNull)
  campusId    String?
  fileName    String
  description String?
  status      TaskStatus
  errorCount  Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  errors TaskError[]
}

model TaskError {
  id        String   @id @default(uuid())
  task      Task     @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  taskId    String
  row       Int
  column    String?
  message   String
  severity  TaskSeverity
  createdAt DateTime @default(now())
}
