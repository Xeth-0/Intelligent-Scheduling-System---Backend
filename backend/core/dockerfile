# syntax=docker/dockerfile:1.4

# ---- Builder Stage ----
FROM node:20-alpine AS builder

WORKDIR /app

# Define build-time arguments. These are passed from docker-compose.yml
ARG DATABASE_URL
ARG SENTRY_AUTH_TOKEN
ARG SENTRY_DSN

# Make ARGs available as environment variables for subsequent commands
ENV DATABASE_URL=${DATABASE_URL}
ENV SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN}
ENV SENTRY_DSN=${SENTRY_DSN}

# Copy package files and prisma schema
COPY package*.json ./
COPY prisma/schema.prisma ./prisma/

# Install all dependencies (including dev dependencies for building)
RUN npm ci

# Copy the rest of the application source code
COPY . .

# Generate prisma client and build the application
RUN npx prisma generate && npm run build
RUN npx prisma db seed

# ---- Runner Stage ----
FROM node:20-alpine AS runner

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY prisma/schema.prisma ./prisma/

# Install only production dependencies to keep the image small
RUN npm ci --omit=dev

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist
# Copy prisma schema and generated client from builder stage
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# Set node environment to production. Can be overridden by docker-compose for development.
ENV NODE_ENV=production

# Expose the port the app runs on
EXPOSE 3001

# Command to run migrations and start the application.
# The DATABASE_URL for migrations will be taken from the runtime environment (from docker-compose).
CMD ["sh", "-c", "npx prisma migrate deploy && node dist/src/main.js"]
